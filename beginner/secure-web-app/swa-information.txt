Setting up the Development Environment:

1. Setting up a Venv environment (Command Prompt Terminal)
	* 'python -m venv venv'

Ensuring the project is in an isolated environment creates a clean setup.

2. Install dependencies
	* 'pip install flask flask-wtf flask-bcrypt' | flask-wtf = CSRF protection and form handling | flask-bcrypt = Hashing and verifying password
	* 'pip freeze > setup/requirements.txt' | This lists every package the app depends on

Setting up the Basic App:

1. Create the app.py using Flask libraries, and render_template to access .html files

from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def home():
    return render_template("home.html")

if __name__ == "__main__":
    app.run(debug=True)

2. Create a simple home.html file

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Secure Web App - Harry Montgomery</title>
</head>
<body>
    <h1>Welcome to my Secure Web App</h1>
</body>
</html>

3. Test the secure web app
	* 'python app.py' | This turns on the app

(See initial-app-startup.png)

Implementing Secure User Login and Registration:

1. Using online documentation, I first created the web apps login/register logic and attached a static CSS file to the .html
Here are some helpful docs
	* https://flask.palletsprojects.com/en/stable/

2. After getting the redirect links working for login and register, I began working on flask-WTF
Here are some helpful docs
	* https://flask-wtf.readthedocs.io/en/1.2.x/
	* https://wtforms.readthedocs.io/en/3.0.x/fields/
	* https://www.youtube.com/watch?v=GbJPqu0ff9A

The Register form was created first, being defined as a class with proper validation. It is then referenced within 'register.html'

(See register-app.png and register-form.png for the code)

3. Update the register logic to check for existing users & Password hashing

This is done by checking the database file (database.db) and seeing if the file has the username saved within it. If it does, then tell the user and not let them access the next page. If it is a unique username, the user is saved into the database and is allowed access to the login page.

The script then hashes the password using python library 'flask_bcrypt' and hashes the user password and placing it into the database.db file, similar to the users name.

@app.route("/register", methods=["GET", "POST"])
def register():
    name = None
    password = None
    form = RegisterForm()
    # Validate Form
    if form.validate_on_submit():
        name = form.name.data
        password = form.password.data
        if check_user(name, password):
            return render_template("login.html")
        else:
            form.name.data = ''
            error = "Username already exists."
            return render_template("register.html", name = name, password = password, form = form, error = error)
    return render_template("register.html",
                           name = name,
                           password = password,
                           form = form)

# Check username exists
def check_user(name, password):
    with open("app/static/database.db", "r") as file:
            for line in file:
                users = (line.strip())
                if users.replace("U:", "") == name:
                    return False
    with open("app/static/database.db", "a") as file:
        file.write(f"U:{name}\n")

        pw_hash = bcrypt.generate_password_hash(password)
        file.write(f"P:{pw_hash}\n")
        print(bcrypt.check_password_hash(pw_hash, password))
        return True
