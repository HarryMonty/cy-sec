Setting up the Development Environment:

1. Setting up a Venv environment (Command Prompt Terminal)
	* 'python -m venv venv'

Ensuring the project is in an isolated environment creates a clean setup.

2. Install dependencies
	* 'pip install flask flask-wtf flask-bcrypt' | flask-wtf = CSRF protection and form handling | flask-bcrypt = Hashing and verifying password
	* 'pip freeze > setup/requirements.txt' | This lists every package the app depends on

Setting up the Basic App:

1. Create the app.py using Flask libraries, and render_template to access .html files

from flask import Flask, render_template

app = Flask(__name__)

@app.route("/")
def home():
    return render_template("home.html")

if __name__ == "__main__":
    app.run(debug=True)

2. Create a simple home.html file

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Secure Web App - Harry Montgomery</title>
</head>
<body>
    <h1>Welcome to my Secure Web App</h1>
</body>
</html>

3. Test the secure web app
	* 'python app.py' | This turns on the app

(See initial-app-startup.png)

Implementing Secure User Login and Registration:

1. Using online documentation, I first created the web apps login/register logic and attached a static CSS file to the .html
Here are some helpful docs
	* https://flask.palletsprojects.com/en/stable/

2. After getting the redirect links working for login and register, I began working on flask-WTF
Here are some helpful docs
	* https://flask-wtf.readthedocs.io/en/1.2.x/
	* https://wtforms.readthedocs.io/en/3.0.x/fields/
	* https://www.youtube.com/watch?v=GbJPqu0ff9A

The Register form was created first, being defined as a class with proper validation. It is then referenced within 'register.html'

(See register-app.png and register-form.png for the code)

3. Update the register logic to check for existing users & Password hashing

This is done by checking the database file (database.db) and seeing if the file has the username saved within it. If it does, then tell the user and not let them access the next page. If it is a unique username, the user is saved into the database and is allowed access to the login page.

The script then hashes the password using python library 'flask_bcrypt' and hashes the user password and placing it into the database.db file, similar to the users name.

@app.route("/register", methods=["GET", "POST"])
def register():
    name = None
    password = None
    form = RegisterForm()
    # Validate Form
    if form.validate_on_submit():
        name = form.name.data
        password = form.password.data
        if check_user(name, password):
            return render_template("login.html")
        else:
            form.name.data = ''
            error = "Username already exists."
            return render_template("register.html", name = name, password = password, form = form, error = error)
    return render_template("register.html",
                           name = name,
                           password = password,
                           form = form)

# Check username exists
def check_user(name, password):
    with open("app/static/database.db", "r") as file:
            for line in file:
                users = (line.strip())
                if users.replace("U:", "") == name:
                    return False
    with open("app/static/database.db", "a") as file:
        file.write(f"U:{name}\n")

        pw_hash = bcrypt.generate_password_hash(password)
        file.write(f"P:{pw_hash}\n")
        print(bcrypt.check_password_hash(pw_hash, password))
        return True

4. Login form logic

To make the logic form, it uses the database to grab the username, check the next line and grabs the hashed password, and compares that to the password entered into the login form. This ensures the same password has been entered, whilst also being validated.

# Login Form
class LoginForm(FlaskForm):
    name = StringField("Username", validators=[DataRequired()])
    password = PasswordField("Password", validators=[DataRequired()])
    submit = SubmitField("Submit")

@app.route("/login", methods=["GET", "POST"])
def login():
    name = None
    password = None
    form = LoginForm()
    # Validate Form
    if form.validate_on_submit():
        name = form.name.data
        password = form.password.data
        if check_pass(name, password):
            return redirect(url_for("dashboard"))
        else:
            form.name.data = ''
            error = "Password is incorrect."
            return render_template("login.html", name = name, password = password, form = form, error = error)
    return render_template("login.html", name = name, password = password, form = form)

# Check password exists
def check_pass(name, password):
    with open("app/static/database.db", "r") as file:
            for line in file:
                users = (line.strip())
                if users.replace("U:", "") == name:
                    current_line = file.readline()
                    pw_hash = current_line.strip().replace("P:", "")
                    return bcrypt.check_password_hash(pw_hash, password)

Secure Session Handling & Route Protection:

Now the login and registration logic is created, with a basic database. I will now be ensuring there is session-based login tracking (flask), restricting access to the dashboard unless the user is logged in, and logout functionality.

1. Creating user sessions
	'session["user"] = name | Putting this right after the login logic, sets up the session with the CSRF token & the users name

2. Make denied access for dashboard if not logged in

@app.route("/dashboard")
def dashboard():
    if "user" not in session:
        return redirect(url_for("login"))
    return render_template("dashboard.html")

This stops the person from accessing unless they are logged into a session under "user"

Adding basic Access Control:

This is to limit what users can do based on their authentication (such as roles / permissions)

1. Blocking login / registration if the user is logged in

This is to stop any potential bugs the user could create by re-logging into an existing session or creating multiple sessions.
	* 'if “user” in session:
		return redirect(url_for(“dashboard”))
This simple code runs before the rest to ensure the user is not logged in before continuing

2. Creating a secure logout session

@app.route("/logout")
def logout():
    session.pop("user", None)
    return redirect(url_for("home"))

This route pops the users session before redirecting the user to the home page, having them log back in if they want to access the website. The logout button is placed within dashboard.html

Hardening the app with Security Headers:

To prevent frequent HTML attacks such as clickjacking, XSS, MIME sniffing, unintended caching, it’s important to include features to stop these attacks from happening.

1. Preventing most attacks (HTTP Header)

I will be adding a CSP header, X-Frame header, X-Content header, and a Referrer-Policy header.

@app.after_request
def add_security_headers(resp):
    resp.headers["Content-Security-Policy"]="default-src \'self\'"
    resp.headers["X-Frame-Options"]="DENY"
    resp.headers["X-Content-Type-Options"]="nosniff"
    resp.headers["Referrer-Policy"]="no-referrer"
    return resp

(See secure-header.png)

Content-Security-Policy | This limits what external content the site is allows to load - such as scripts, styles, images, iframes, etc. This will only let scripts/styles load from within the domain and prevents inline scripts.
X-Frame-Options | This prevents the website from being embedded in an iframe on another site, blocking clickjacking.
X-Content-Type-Options | This prevents browsers from ‘sniffing’ the content type from files. This stops MIME-based attacks.
Referrer-Policy | This tells the browser not to send the Referrer header at all when clicking links or submitting forms, this prevent leaking sensitive urls.

(See dashboard-page.png, home-page.png, login-page.png, and register-page.png for full website)
