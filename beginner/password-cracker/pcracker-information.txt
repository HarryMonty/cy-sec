Understanding Password Cracking Basics Theory:

1. What is a Hash?

A hash is a one-way cryptographic function that can convert data such as passwords into an encrypted string. Hashes are non-reversible and you cannot de-crypt them directly.

Common has algorithms include: MD5, SHA-1, SHA-256

2. What is a Dictionary Attack?

A dictionary attack is where a program reads from a file and compares the hash of each word to a target hash. This is a faster method than a brute force attack as it only focused on likely passwords, not random.

3. What is a Brute Force Attack?

A brute force attack is a program that tries every possible combination of characters. This can be much slower and very resource heavy. This is usually used when there are no dictionary words, or when the password is known to be short/simple.

4. Why can't you reverse a Hash?

Hashes are mathematical traps - easy to compute and nearly impossible to reverse. The only way to reverse a hash is by guessing the input and comparing the output to the hash.

Setting up the Environment and Testing a Hash:

1. Creating a Hashed password (SHA-256)
Password: dragon123

Create a hashing script (Visual Studio + Python)
import hashlib

password = "dragon123"
hashed = hashlib.sha256(password.encode()).hexdigest()
print(hashed)

(See hashed-password.png for result or hash.txt)

2. Filling in the wordlist
Add fake password + the real one

(See wordlist.txt for wordlist)

Writing the Cracker Script (Dictionary Attack)

1. Delete past data for encrypting password and create new logic for Dictionary Attack
	* Open 'hash.txt' and read the target hash
	* Open 'wordlist.txt' and loop through each password
	* Hash each password using SHA-256 and compare it to the target hash
	* If a match is found, print the password and exit

(See cracker.py for full password cracking code)
(See attack-output.png for terminal logs)

